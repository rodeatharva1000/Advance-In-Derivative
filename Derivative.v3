<!DOCTYPE html>
<html>
    <head>
        <title>
            Two function three level derivative code
        </title>
    </head>
    <body>
        <style>
#text10{
    position:absolute;
    top:380px;
    left:20px;
    font-size:20px;
    color:black;
}
#text20{
    position:absolute;
    top:410px;
    left:20px;
    font-size:20px;
    color:green;
}
.basic1{
    position:absolute;
    left:10px;
    top:500px;
    background:black;
    color:white;
    border-radius:2px;
    text-decoration:none;
    padding:8px;
    }
.basic1:hover{
    position:absolute;
    left:10px;
    top:500px;
    background:white;
    color:black;
    border-radius:2px;
    text-decoration:none;
    padding:9px;
    }
.i{
    font-size:30px;
    font-family:courier;
    color:orange;
}
.ii{
    font-size:10px;
    color:orange;
}
.iii{
    color:orange;
}
.basic{
                position:absolute;
                left:10px;
                top:35px;
                background:black;
                color:white;
                border-radius:2px;
                text-decoration:none;
                padding:8px;
            }
            .basic:hover{
                position:absolute;
                left:10px;
                top:35px;
                background:white;
                color:black;
                border-radius:2px;
                text-decoration:none;
                padding:9px;
            }
            .properties{
                position:absolute;
                left:90px;
                top:35px;
                background:black;
                color:white;
                border-radius:2px;
                text-decoration:none;
                padding:8px;
            }
            .properties:hover{
                position:absolute;
                left:90px;
                top:35px;
                background:white;
                color:black;
                border-radius:2px;
                text-decoration:none;
                padding:9px;
            }
            .hovereffects{
                position:absolute;
                left:170px;
                top:35px;
                background:black;
                color:white;
                border-radius:2px;
                text-decoration:none;
                font-family:courier;
                padding:8px;
            }
            .hovereffects:hover{
                left:170px;
                position:absolute;
                top:35px;
                background:white;
                color:black;
                border-radius:2px;
                text-decoration:none;
                padding:9px;
            }
            .animation{
                position:absolute;
                left:360px;
                top:35px;
                background:black;
                color:white;
                border-radius:2px;
                text-decoration:none;
                padding:8px;
            }
            .animation:hover{
                position:absolute;
                left:360px;
                top:35px;
                background:white;
                color:black;
                border-radius:2px;
                text-decoration:none;
                padding:9px;
            }
            .derivative{
                position:absolute;
                left:510px;
                top:35px;
                background:black;
                color:white;
                border-radius:2px;
                text-decoration:none;
                padding:8px;
            }
            .derivative:hover{
                position:absolute;
                left:510px;
                top:35px;
                background:white;
                color:black;
                border-radius:2px;
                text-decoration:none;
                padding:9px;
            }
            .divvv{
                background:#eeeeee;
                padding:5px;
                border-radius:2px;
            }
        </style>
        <div id="text10"></div>
        <div id="text20"></div>
        <div class="divvv">
        <a href="" class="basic">Home</a>&nbsp;
        <a href="" class="properties">About</a>&nbsp;
        <a href="" class="hovereffects">How it works <i class="iii">???</i></a>&nbsp;
        <a href="" class="animation">Documentation</a>
        <a href="" class="derivative">Derivative</a><br>
        <a href="" class="basic1">CLICK HERE for next function</a>
        </div><br><br>
        <p>
           <i class="i">____________[ WELCOME TO SOLVE@DERIVATIVE ]______________</i><br>
            <i class="ii">-</i> Enter The Function To Find Derivative ( limitaion till u and v )<br> 
            <i class="ii">-</i> For Outer Function Use [ ]<br>
            <i class="ii">-</i> For Inner Function Use ( )<br>
            <i class="ii">-</i> Use . To Multiply Constant<br>
            <i class="ii">-</i> Use ^ to show powers<br>
            <i class="ii">-</i> Input According To The Input Methods Is Mendetary<br> 
            <i class="ii">-</i> Read Instructions Before Using<br>
            <i class="ii">-</i> Try Provided Examples To Learn More About Input Methods<br> 
        </p>
        <link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" />
<script defer src="https://pyscript.net/latest/pyscript.js"></script>
        <py-script class="pyy">
            # PYTHON PROJECT

            # DERIVATIVE ADVANCE PROGRAM IN PYTHON (version : 3.0.0)
            
            """1] putting currect number and type of of bracket in the proper sequence is the heart of this program 
               2] program may behave unexpectadely if not proper brackets are given 
               3] input should be in the form of currect input method
               4] the examples are given for this refrence purpose"""
            
            
            
            """i also uploaded this program at github
               check my python reposetary at github"""
            
            
            # my github link : https://github.com/rodeatharva1000
            
            # THE ANSWER STRING
            the_ans_string = ""
            
            
            # Addition prperty of string
            def ans_property(add) :
                global the_ans_string
                the_ans_string = the_ans_string + add + " "
                
            
            # changing the variables same as before
            def change_insider(to) :
               global the_ans_string
               the_ans_string = the_ans_string.replace("[x]",f"[{to}]")
               
            
            
            # DEFINING THE MAIN CLASS
            class Derivative :
                
                # CLASS VARIABLES
                inp = None
                ans = None
             
                # CLASS CONSTRUCTOR FOR Derivative CLASS
                def __init__(self,catagory_inp) :
                        self.inp = catagory_inp
                        if self.inp == "-" :
                            self.ans = "] - ["
                            self.print_ans()
                        else :
                            self.myfind(self.inp)
                            self.remove_minus()
                            
                
                # PRINTING ANSWER
                def print_ans(self) :
                    ans_property(self.ans)
                    
                
                # REMOVING MINUS 
                def remove_minus(self) :
                    if self.inp == "-" :
                        pass
                    else :
                        count_minus = self.inp.count("-")
                        inp_replace = self.inp.replace("-","")
                        self.inp = inp_replace
                        self.ans = count_minus*"(-)"
                        self.print_ans() 
            
            
            
                # SEPERATE CONSTANTS
                def seperate_constant(self) :
                    cons_var_list = self.inp.split(".") 
                    ans_property(cons_var_list[0])
                    self.inp = cons_var_list[1]
                    self.check_inp()
            
            # example : 33.sin(90x)
                
                
                # LOOPING THE FUNCTION 
                def myfind(self,variable) :
                    self.variable = variable
                    primary_list = [0]
                    secondary_list = []
                    for item in range(0,len(variable)) :
                        if variable[item] == "[" :
                            primary_list.append(item)
                    
                    find = self.inp.find("]")
                    secondary_list.append(find)
                    
                    open_bracket = max(primary_list)
                    
                    secondary_inp = ""
                    
                    for item in range((open_bracket)+1,find) :
                        secondary_inp = secondary_inp + variable[item]
                    
                    if "+" in secondary_inp :
                        ans_property("(")
                        self.inp = self.inp.replace(secondary_inp,"x") 
                        self.check_inp()
                        change_insider(secondary_inp) 
                        ans_property(")")
                        secondary_inp = secondary_inp.replace("(","[")
                        secondary_inp = secondary_inp.replace(")","]") 
                        obj = Catagory(secondary_inp)
                    elif "-" in secondary_inp :
                        ans_property("(")
                        self.inp = self.inp.replace(secondary_inp,"x") 
                        self.check_inp() 
                        change_insider(secondary_inp)
                        ans_property(")")
                        secondary_inp = secondary_inp.replace("(","[")
                        secondary_inp = secondary_inp.replace(")","]")
                        obj = Catagory(secondary_inp)
                    elif "*" in secondary_inp :
                        ans_property("(")
                        self.inp = self.inp.replace(secondary_inp,"x") 
                        self.check_inp() 
                        change_insider(secondary_inp)
                        ans_property(")")
                        secondary_inp = secondary_inp.replace("(","[")
                        secondary_inp = secondary_inp.replace(")","]")
                        obj = Catagory(secondary_inp)
                    elif "/" in secondary_inp :
                        ans_property("(")
                        self.inp = self.inp.replace(secondary_inp,"x") 
                        self.check_inp() 
                        change_insider(secondary_inp)
                        ans_property(")")
                        secondary_inp = secondary_inp.replace("(","[")
                        secondary_inp = secondary_inp.replace(")","]")
                        obj = Catagory(secondary_inp)
                    else :
                        self.check_inp()
                
                
                # CHECKING INPUT (CONSIDERING BOTH CLASSES)
                def check_inp(self) :
                    if self.inp == "+" :
                        self.ans = "] + ["
                        self.print_ans()
                    
                    if "." in self.inp :
                        self.seperate_constant()
                    
                    elif self.inp == "-" :
                        pass
                    
                    elif self.inp == "/" :
                        self.ans = "/"
                        self.print_ans()
                    
                    elif self.inp.startswith("sin[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.sin()
                    
                    elif self.inp.startswith("cos[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cos()
                    
                    elif self.inp.startswith("tan[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.tan()
                    
                    elif self.inp.startswith("cot[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cot()
                    
                    elif self.inp.startswith("sec[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.sec()
                    
                    elif self.inp.startswith("cosec[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cosec()
                        
                    elif self.inp.startswith("sin^[-1]") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.sin_inv()
                            
                    elif self.inp.startswith("cos^[-1]") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cos_inv()
                            
                    elif self.inp.startswith("tan^[-1]") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.tan_inv()
                            
                    elif self.inp.startswith("cot^[-1][") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cot_inv()
                            
                    elif self.inp.startswith("sec^[-1]") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.sec_inv()       
                    
                    elif self.inp.startswith("cosec^[-1]") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.cosec_inv()
                           
                    elif self.inp.startswith("log[") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.log()
                    
                    elif self.inp.startswith("e^") :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.exponential()
                    
                    elif "/" and "]^" in self.inp : 
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.twwo_in()
                    
                    elif "/" in self.inp :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.one_by_x()
                    
                    elif "]^" in self.inp :
                        if "x" not in self.inp :
                            self.ans = "0"
                            self.print_ans()
                        else :
                            self.x_race_to_n()   
                    
                    elif not self.inp.isdigit() :
                        self.nx()
                    
                    elif self.inp.isdigit() :
                        self.constant()
            
                
                # DISIGIONS
                def twwo_in(self) :
                    if self.inp.startswith("[") :
                        self.x_race_to_n()    
                    elif not self.inp.startswith("[") :
                        self.one_by_x()
                
                
                # SIN(TRIGO) FUNCTION
                def sin(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"cos[{str}]")
                        self.print_ans()
                        if self.ans != "cos[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
            
            # example : sin(90x) , sin(cos(90x))
            
                
                # COS(TRIGO) FUNCTION
                def cos(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-sin[{str}]")
                        self.print_ans()
                        if self.ans != "-sin[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
            
            # example : cos(tan(90x))
                
                
                # TAN(TRIGO) FUNCTION
                def tan(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"sec^[{str}]")
                        self.print_ans()
                        if self.ans != "sec^[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                
            # example : tan(sin(90x))
            
                
                # COT(TRIGO) FUNCTION
                def cot(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-cosec^[{str}]")
                        self.print_ans()
                        if self.ans != "-cosec^[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
            
             # example : cot(sec(90x)) 
            
                
                # SEC(TRIGO) FUNCTION
                def sec(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"sec[{str}]*tan[{str}]")
                        self.print_ans()
                        if self.ans != "sec[x]*tan[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
            
            # example : sec(tan(cosec(90x))) 
            
                
                # COSEC(TRIGO) FUNCTION
                def cosec(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-cosec[{str}]*cot[{str}]")
                        self.print_ans()
                        if self.ans != "-cosec[x]*cot[{str}]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                
            # example : cosec(tan(90x))   
            
            
                # SININV(TRIGO) FUNCTION
                def sin_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"1/[1-({str})^2]^(1/2)")
                        self.print_ans()
                        if self.ans != "1/[1-(x)^2]^(1/2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                            
            
             # example : sin^(-1)(tan(3x))
                            
                
                # COSINV(TRIGO) FUNCTION
                def cos_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-1/[1-({str})^2]^(1/2)")
                        self.print_ans()
                        if self.ans != "-1/[1-(x)^2]^(1/2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                            
                            
            
             # example : cos^(-3)(tan(4x))
                            
                            
                 # TANINV(TRIGO) FUNCTION 
                def tan_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"1/1+({str})^(2)")
                        self.print_ans()
                        if self.ans != "1/1+(x)^(2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                                      
            
             # example : tan^(-1)(cot(99x))
             
             
                            
                # COTINV(TRIGO) FUNCTION
                def cot_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-1/1+({str})^(2)")
                        self.print_ans()
                        if self.ans != "-1/1+(x)^(2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                            
            
             # example : cot^(-1)(sec(7x))
                            
                         
                # SECINV(TRIGO) FUNCTION
                def sec_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"1/({str})[({str})^(2)-1]^(1/2)")
                        self.print_ans()
                        if self.ans != "1/(x)[(x)^(2)-1]^(1/2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                            
                            
            
             # example : sec^(-1)(log(3x))
                            
                            
                # COSECINV(TRIGO) FUNCTION
                def cosec_inv(self) :
                    find = self.inp.find("^[-1][")
                    list = []
                    for i in range(find+6,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"-1/({str})[({str})^(2)-1]^(1/2)")
                        self.print_ans()
                        if self.ans != "-1/(x)[(x)^(2)-1]^(1/2)" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                            
                            
            
             # example : cosec^(-1)(sin(cos(9x)))
                
                
                
                # LOG FUNCTION
                def log(self) :
                    find = self.inp.find("[")
                    list = []
                    for i in range(find+1,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""
                    for i in list :
                        str = "".join(list)
                    if str.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"1/{str}")
                        self.print_ans()
                        if self.ans != "1/x" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
                
            # example : log(sin(90x))
            
                
                # N(X) FUNCTION
                def nx(self) :
                    str = self.inp.replace("x","(1)")
                    self.ans = str
                    self.print_ans()
                     
                    
                # ABOUT CONSTANT
                def constant(self) :
                    self.ans = "0"
                    self.print_ans()
            
            
            # example : 33 , 43     
                
                
                # EXPONENTIAL FUNCTION
                def exponential(self):
                    find = self.inp.find("e")
                    list = []
                    for i in range(find+3,len(self.inp)-1) :
                        list.append(self.inp[i])
                    str = ""	
                    for i in list  :
                        str = "".join(list)
                    if str.isdigit() :
                        ans = 0
                        self.print_ans()
                    elif not str.isdigit():
                        self.ans = (f"e^[{str}]")
                        self.print_ans()
                        if self.ans != "e^[x]" :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass
            
             # example : e^(cos(90x))   
                
                
                # 1/X FUNCTION
                def one_by_x(self) :
                    find = self.inp.find("/")
                    find_second = self.inp.find("[")
                    
                    list = []
                    list_second = []
                    list_third = []
                    str = ""
                    str_second = ""
                    str_third = ""
                    
                    for i in range(0,find) :
                        list.append(self.inp[i])
                    for i in list :
                        str = "".join(list)
                    
                    
                    for i in range(find_second+1,len(self.inp)-1) :
                        list_second.append(self.inp[i])        
                    for i in list_second : 
                        str_second = "".join(list_second)
            
                    
                    for i in range(find+1,find_second) :
                        list_third.append(self.inp[i])        
                    for i in list_third : 
                        str_third = "".join(list_third)
            
                    
                    if str_second.isdigit() :
                        self.ans = 0
                        self.print_ans()
                    elif not str_second.isdigit():
                        self.ans = (f"-{str}/{str_third}[{str_second}]^2")
                        self.print_ans()
                        if self.ans != "-1/[x]^2" : 
                            self.inp = str_second
                            self.check_inp() 
                        else :
                            pass
            
            
            # example : 1/(x) , 22/44(cos(90x))
                
                
                
                # VARIABLE RACE TO CONSTANT (Root functions also includes here)
                def x_race_to_n(self): 
                    find = self.inp.find("]^")
                    find_second = self.inp.find("^[")
                    list = []
                    list_second = []
                    str = ""
                    str_second = ""
                    
                    
                    for i in range(1,find) :
                        list.append(self.inp[i])	
                    for i in list :
                        str = "".join(list)
            
                    for i in range(find_second+2,len(self.inp)-1) :
                        list_second.append(self.inp[i])	
                    for i in list_second :
                        str_second = "".join(list_second)
                    
                    if str.isdigit() :
                        self.ans = "0" 
                        self.print_ans()
            
                    elif not str.isdigit() : 
                        self.ans = (f"{str_second}.{str}^{int(str_second)-1}")
                        self.print_ans()
                        if "[x]^" not in self.inp :
                            self.inp = str
                            self.check_inp()
                        else :
                            pass         
            
            # example : (sin(cos(90x)))^(67)
            
            
            
            # FINDING AND APPLYING CATYAGORY FOR 2 (U AND V) FUNCTIONS
            
            
            class Catagory :
            
                # CATAGORY CLASS VARIABLES
                
                main_inp = None
                
                main_ans = None 
                
               
                 # PRINTING MAIN ANSWER
                def print_main_ans(self) :
                    ans_property(self.main_ans)
                
                
                # FOR SPECIAL ANSWER OF DIVIDION
                def print_main_division_ans(self) :
                    ans_property(f"[({self.main_ans})^2]")
                
                
                
                # CLASS CONSTRUCTOR FOR Catagory CLASS
                def __init__(self,inputs) : 
                    self.main_inp = inputs
                    self.main_inp = self.main_inp.replace(" ","")
                    self.main_inp = self.main_inp.lower()
                    self.check_main_inp()
                
                
                
                # CHECKING MAIN INPUT
                def check_main_inp(self) :
                    if "]+" in self.main_inp :
                        self.plus()
                    elif "]*" in self.main_inp :
                        self.product()  
                    elif "]/" in self.main_inp : 
                        self.division()   
                    elif "]-" in self.main_inp :
                        self.minus()
                    else :
                        obj = Derivative(self.main_inp)
            
                
                # FUNCTION OF PLUS
                def plus(self) :
                    self.main_inp = self.main_inp.replace("]+","]]+")
                    plus_list = self.main_inp.split("]+")
                    plus_list.append("+")
                    plus_list[1] , plus_list[2] = plus_list[2] , plus_list[1]
                    
                    
                    ans_property("(")
                    for object in range(0,len(plus_list)) :
                        obj = Derivative(plus_list[object])
                    ans_property(")")
            
                
                # FUNCTION OF MINUS
                def minus(self) : 
                    if "-" in self.main_inp :
                        count = self.main_inp.count("-")
                        if count >= 2 :
                            ans_property(((count)-1)*"(-)")
                            str = ""
                            list = []
                            for item in self.main_inp :
                                list.append(item) 
                            list.remove(list[0])
                            for items in list :
                                str = "".join(list) 
                                self.main_inp = str
                    self.main_inp = self.main_inp.replace("]-","]]-")
                    minus_list = self.main_inp.split("]-") 
                    minus_list.append("-")
                    minus_list[1] , minus_list[2] = minus_list[2] , minus_list[1]
            
                    ans_property("(")
                    for object in range(0,len(minus_list)) :
                        obj = Derivative(minus_list[object])
                    ans_property(")")
                
                
                
                # FUNCTION OF PRODUCT    
                def product(self) : 
                    self.main_inp = self.main_inp.replace("]*","]]*")
                    product_list = self.main_inp.split("]*")
                    product_list.append("+")
                    product_list.append(product_list[0])
                    product_list.append(product_list[1])
                    
                    ans_property("(")
                    for object in range(0,len(product_list)) :   
                        if object % 2 == 0 :
                            obj = Derivative(product_list[object])
                        else :
                            self.main_ans = product_list[object]
                            self.print_main_ans() 
                    ans_property(")")     
                    
                   
            
                
                # FUNCTION OF DIVISION
                def division(self) :
                    self.main_inp = self.main_inp.replace("]/","]]/")
                    division_list = self.main_inp.split("]/")
                    division_list[0] , division_list[1] = division_list[1] , division_list[0]
                    division_list.append("-")
                    division_list.append(division_list[1])
                    division_list.append(division_list[0])
                    division_list.append("/")
                    division_list.append(division_list[0])
            
                    
                    
                    
                    # FOR CREATING OBJECT ACCORDING TO LIST
                    for object in range(0,len(division_list)) : 
                        if object == 1 :
                            obj = Derivative(division_list[object])
                        elif object == 2 :
                            obj = Derivative(division_list[object])
                        elif object == 4 :
                            obj = Derivative(division_list[object])
                        elif object == 5 :
                            ans_property(")]}") 
                            obj = Derivative(division_list[object])
                        elif object == 0 :
                            ans_property("{[(")
                            self.main_ans = division_list[object]
                            self.print_main_ans()
                        elif object == 3 :
                            self.main_ans = division_list[object] 
                            self.print_main_ans() 
                        elif object == 6 :
                            self.main_ans = division_list[object] 
                            self.print_main_division_ans()
            
            
            
            

            
             
             
             
             
            
            
            
            
            
            
            # RUNNING LOOP TILL INFINITY
            inputs = input("")
            pyscript.write("text10",f"(d/dx) of {inputs} is ")
            if "[" not in inputs :
                inputs = inputs.replace("(","[")
                inputs = inputs.replace(")","]")
            # creating object of Catagory class
            obj = Catagory(inputs)
            pyscript.write("text20",f"Answer : {the_ans_string}")
            the_ans_string = ""
            
            
            # EXAMPLES ON CATAGORIES :
            
            # catagory (+) : sin(90x)+cos(90x)
            
            # catagory (-) : sin(90x)-sin(tan(90x))
            
            # catagory (*) : sin(90x)*sec(95x)
            
            # catagory (/) : cosec(90x)/sec(90x)
            
            
            # program catagory - maths\calculus\derivatives
            
            # work catagory - u+v / u-v / u.v | u/v
            
            # code editor - visual studio (VS) code 
            
            # language - python
            
            # VERSION THREE
            # release : 24/04/2023
            # last update : lets see
            # three level two function dervatives
            
            # Developed and maintained by :- @ Rode Atharva Mahesh 
            
            # OS : on windows os
            
            # for any queery  :  rodeatharva2@gmail.com
        </py-script>
    </body>
</html>
